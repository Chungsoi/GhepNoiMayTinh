//1. Code Nhiệt độ
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <BlynkSimpleEsp8266.h>
#include "DHT.h"           
#include <SimpleTimer.h>
#define BLYNK_PRINT Serial
//----------------------------------------

#define DHTPIN 2
#define DHTTYPE DHT11 //--> Defines the type of DHT sensor used (DHT11, DHT21, and DHT22), in this project the sensor used is DHT11.

#include "PageIndex.h" //--> Include the contents of the User Interface Web page, stored in the same folder as the .ino file

#define LEDonBoard 2  //--> Defining an On Board LED, used for indicators when the process of connecting to a wifi router

//----------------------------------------SSID and Password of your WiFi router
const char* ssid = "admin";
const char* password = "0988311658";
char auth[] = "Ian9mrNnUwDypD4tWxl5sUPGArlnfi9X";
//----------------------------------------

ESP8266WebServer server(80);  //--> Server on port 80
DHT dht(DHTPIN, DHTTYPE); //--> Initialize DHT sensor, DHT dht(Pin_used, Type_of_DHT_Sensor);
SimpleTimer timer;
float t;
float h;
//

//----------------------------------------This routine is executed when you open NodeMCU ESP8266 IP Address in browser
void handleRoot() {
  server.send(200, "text/html", MAIN_page); //--> Send web page
}
//----------------------------------------
//----------------------------------------Procedure for reading the temperature value of a DHT11 sensor
void handleDHT11Temperature() {
  float t = dht.readTemperature();  //--> Read temperature as Celsius (the default). If you want to read the temperature sensor in Fahrenheit, use this -> float t = dht.readTemperature (true);
  String Temperature_Value = String(t);
 Blynk.virtualWrite(V8, t);
  server.send(200, "text/plane", Temperature_Value); //--> Send Temperature value only to client ajax request
  
  if (isnan(t)) { //--> Check if any reads failed and exit early (to try again).  
    Serial.println("Failed to read from DHT sensor!");
  }
  else {
    Serial.print("DHT11 || Temperature : ");
    Serial.print(t);
    Serial.print(" || ");
  }
}
//----------------------------------------
//----------------------------------------Procedure for reading humidity values from DHT11 sensors
void handleDHT11Humidity() {
  float h = dht.readHumidity();
  String Humidity_Value = String(h);
  Blynk.virtualWrite(V7, h);
  server.send(200, "text/plane", Humidity_Value); //--> Send Humidity value only to client ajax request
  if (isnan(h)) {
    Serial.println("Failed to read from DHT sensor !");
  }
  else {
    Serial.print("Humidity : ");
    Serial.println(h);
  }
}
//----------------------------------------
//----------------------------------------Setup
void setup(void){
  Serial.begin(115200);
   Blynk.begin(auth, ssid, password);
  dht.begin();  //--> Start reading DHT11 sensors
  delay(500);
  
  WiFi.begin(ssid, password); //--> Connect to your WiFi router
  Serial.println("");
    
  pinMode(LEDonBoard,OUTPUT); //--> On Board LED port Direction output
  digitalWrite(LEDonBoard, HIGH); //--> Turn off Led On Board
  
  //----------------------------------------Wait for connection
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    //----------------------------------------Make the On Board Flashing LED on the process of connecting to the wifi router.
    digitalWrite(LEDonBoard, LOW);
    delay(250);
    digitalWrite(LEDonBoard, HIGH);
    delay(250);
    //----------------------------------------
  }
  //----------------------------------------
  digitalWrite(LEDonBoard, HIGH); //--> Turn off the On Board LED when it is connected to the wifi router.
  //----------------------------------------If connection successful show IP address in serial monitor
  Serial.println("");
  Serial.print("Successfully connected to : ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  //----------------------------------------
  server.on("/", handleRoot); //--> Routine to handle at root location. This is to display web page.
  server.on("/readTemperature", handleDHT11Temperature);  //--> Routine to handle the call procedure handleDHT11Temperature
  server.on("/readHumidity", handleDHT11Humidity);  //--> Routine to handle the call procedure handleDHT11Humidity

  server.begin(); //--> Start server
  Serial.println("HTTP server started");
}
//----------------------------------------
//----------------------------------------Loop
void loop(){
  server.handleClient();  //Handle client requests
}

//   File  PageIndex.h

const char MAIN_page[] PROGMEM = R"=====(
<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" rel="stylesheet">
    <style>
      html {
        font-family: Arial;
        display: inline-block;
        margin: 0px auto;
        text-align: center;
      }
      h1 { font-size: 2.0rem; }
      p { font-size: 2.0rem; }
      .units { font-size: 1.2rem; }
      .dht-labels{
        font-size: 1.5rem;
        vertical-align:middle;
        padding-bottom: 15px;
      }
    </style>
  </head>
  <body>
    <h1>ĐH CNTT & TT</h1>
    <p>
      <i class="fa fa-thermometer-half" style="font-size:3.0rem;color:#62a1d3;"></i> 
      <span class="dht-labels">Temperature : </span> 
      <span id="TemperatureValue">0</span>
      <sup class="units">&deg;C</sup>
    </p>
    <p>
      <i class="fa fa-tint" style="font-size:3.0rem;color:#75e095;"></i>
      <span class="dht-labels">Humidity : </span>
      <span id="HumidityValue">0</span>
      <sup class="units">%</sup>
    </p>
    <p>
      <i class="far fa-clock" style="font-size:1.0rem;color:#e3a8c7;"></i>
      <span style="font-size:1.0rem;">Time </span>
      <span id="time" style="font-size:1.0rem;"></span>
      
      <i class="far fa-calendar-alt" style="font-size:1.0rem;color:#f7dc68";></i>
      <span style="font-size:1.0rem;">Date </span>
      <span id="date" style="font-size:1.0rem;"></span>
    </P>
    <script>
      setInterval(function() {
        // Call a function repetatively with 2 Second interval
        getTemperatureData();
        getHumidityData();
      }, 2000); 
      
      setInterval(function() {
        // Call a function repetatively with 1 Second interval
        Time_Date();
      }, 1000); 

      function getTemperatureData() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
            document.getElementById("TemperatureValue").innerHTML =
            this.responseText;
          }
        };
        xhttp.open("GET", "readTemperature", true);
        xhttp.send();
      }

      function getHumidityData() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function() {
          if (this.readyState == 4 && this.status == 200) {
          document.getElementById("HumidityValue").innerHTML =
          this.responseText;
          }
        };
        xhttp.open("GET", "readHumidity", true);
        xhttp.send();
      }
      function Time_Date() {
        var t = new Date();
        document.getElementById("time").innerHTML = t.toLocaleTimeString();
        var d = new Date();
        const dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday","Saturday"];
        const monthNames = ["January", "February", "March", "April", "May", "June","July", "August", "September", "October", "November", "December"];
        document.getElementById("date").innerHTML = dayNames[d.getDay()] + ", " + d.getDate() + "-" + monthNames[d.getMonth()] + "-" + d.getFullYear();
      }
    </script>
  </body>
</html>
)=====";

//2.   Code Điều khiển Xe

#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>

// You should get Auth Token in the Blynk App.
char auth[] = "cIt1dbp5mtkCCtfWWacEY46m6KQCSCta"; //YourToken
// Your WiFi credentials.
char ssid[] = "iPhone"; //tên wifi nhà bạn
char pass[] = "ICTU2024@"; //mật khẩu
BlynkTimer timer;

const byte L298N_A_pin = D5;// GPI05
const byte L298N_A_In1_pin = D8; //GPI04
const byte L298N_A_In2_pin = D7;  //GPI0

const byte L298N_B_In3_pin = D4; // GPI02
const byte L298N_B_In4_pin = D3;// GPIO14 
const byte L298N_B_pin = D6; //GPI12
byte SolSinyal = 0;
byte SagSinyal = 0;
byte ArkaLamba = 0;


void motorSpeed(int prmA, byte prmA1, byte prmA2, int prmB, byte prmB1, byte prmB2)
{
  analogWrite(L298N_A_pin,prmA);
  analogWrite(L298N_B_pin,prmB);
  
  digitalWrite(L298N_A_In1_pin,prmA1);
  digitalWrite(L298N_A_In2_pin,prmA2);
  digitalWrite(L298N_B_In3_pin,prmB1);
  digitalWrite(L298N_B_In4_pin,prmB2);
  
}
BLYNK_WRITE(V0) {
  int x = param[0].asInt();
  int y = param[1].asInt();
// x =  -2 -1 0 1 2 
// Y =  -2 -1 0 1 2 
 if (y>=0)
 {
  ArkaLamba = 0;
 // digitalWrite(Led4_pin,LOW);
 }
 else
 {
  ArkaLamba = 1;
  SolSinyal = 1;
  SagSinyal = 1;
 }
  if ((x==0) && (y==0)) /// stop
 {
   motorSpeed(0,LOW,LOW,0,LOW,LOW); 
   SolSinyal = 0;
   SagSinyal = 0;
 }
 else if ((x==0) && (y>0))  
 {
  if (y==1){ motorSpeed(700,HIGH,LOW,700,HIGH,LOW); } // 
  else { motorSpeed(900,HIGH,LOW,900,HIGH,LOW); }
  SolSinyal = 0;
  SagSinyal = 0;
 }
 else if ((y==0) && (x>0))
 { 
  motorSpeed(900,HIGH,LOW,900,LOW,HIGH); 
  SagSinyal = 1;
  }
 else if ((y>0) && (x>0))
 {  
  motorSpeed(900,HIGH,LOW,700,LOW,LOW); 
  SagSinyal = 1;
  }
 else if ((y==0) && (x<0))
 { 
  motorSpeed(900,LOW,HIGH,900,HIGH,LOW); 
  SolSinyal = 1;
  }
 else if ((y>0) && (x<0))
 {   
  motorSpeed(700,LOW,LOW,900,HIGH,LOW); 
  SolSinyal = 1;
  }
 
 if ((y<0) && (x<0))
    motorSpeed(700,LOW,LOW,900,LOW,HIGH); 
 else if ((y<0) && (x>0))
    motorSpeed(900,LOW,HIGH,700,LOW,LOW); 
 else if ((y<0) && (x==0))
   motorSpeed(900,LOW,HIGH,900,LOW,HIGH); 

}

void setup() {
  Serial.begin(115200);
  pinMode(L298N_A_In1_pin,OUTPUT);
  pinMode(L298N_A_In2_pin,OUTPUT);
  pinMode(L298N_B_In3_pin,OUTPUT);
  pinMode(L298N_B_In4_pin,OUTPUT);

 digitalWrite(L298N_A_In1_pin,LOW);
 digitalWrite(L298N_A_In2_pin,LOW);
 digitalWrite(L298N_B_In3_pin,LOW);
 digitalWrite(L298N_B_In4_pin,LOW);

  Blynk.begin(auth, ssid, pass);
  timer.setInterval(1000L, sendTemps);
}
void sendTemps()
{

}

void loop() {
  Blynk.run();
  timer.run();
} 


//3. Code Khoảng Cách

#define TRIGGER D1
#define ECHO    D2
#define TRIGGER_1 D3
#define ECHO_1    D4
#define TRIGGER_2 D5
#define ECHO_2    D6 
#define TRIGGER_3 D7
#define ECHO_3    D8
#define BLYNK_PRINT Serial    // Comment this out to disable prints and save space
#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
// You should get Auth Token in the Blynk App.
// Go to the Project Settings (nut icon).
char auth[] = "sk3X_-4-Oh3Et2bctql4rykY90G6Q3I6";
// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "Cay Roi"; //tên wifi nhà bạn
char pass[] = "12345678"; //mật khẩu
void setup() {
  Serial.begin (115200);
  Blynk.begin(auth, ssid, pass);
  pinMode(TRIGGER, OUTPUT);
  pinMode(ECHO, INPUT);
  pinMode(TRIGGER_1, OUTPUT);
  pinMode(ECHO_1, INPUT);
   pinMode(TRIGGER_2, OUTPUT);
  pinMode(ECHO_2, INPUT);
  pinMode(TRIGGER_3, OUTPUT);
  pinMode(ECHO_3, INPUT);
}
void loop() {
  long duration, distance, duration1, distance1, duration2, distance2 , duration3, distance3;
  digitalWrite(TRIGGER, LOW);  
  delayMicroseconds(2); 
  
  digitalWrite(TRIGGER, HIGH);
  delayMicroseconds(10); 
  
  digitalWrite(TRIGGER, LOW);
  duration = pulseIn(ECHO, HIGH);
  distance = (duration/2) / 29.1;
  
  Serial.print(distance);
  Serial.println("Centimeter:");
  Blynk.virtualWrite(V5, distance);
  //2
  
  digitalWrite(TRIGGER_1, LOW);  
  delayMicroseconds(2); 
  
  digitalWrite(TRIGGER_1, HIGH);
  delayMicroseconds(10); 
  
  digitalWrite(TRIGGER_1, LOW);
  duration1 = pulseIn(ECHO_1, HIGH);
  distance1 = (duration1/2) / 29.1;
  
  Serial.print(distance1);
  Serial.println("Centimeter:");
  Blynk.virtualWrite(V6, distance1);  
  //3
  
  digitalWrite(TRIGGER_2, LOW);  
  delayMicroseconds(2); 
  
  digitalWrite(TRIGGER_2, HIGH);
  delayMicroseconds(10); 
  
  digitalWrite(TRIGGER_2, LOW);
  duration2 = pulseIn(ECHO_2, HIGH);
  distance2 = (duration2/2) / 29.1;
  
  Serial.print(distance2);
  Serial.println("Centimeter:");
  Blynk.virtualWrite(V2, distance2); 
 
  //4
  
  digitalWrite(TRIGGER_3, LOW);  
  delayMicroseconds(2); 
  
  digitalWrite(TRIGGER_3, HIGH);
  delayMicroseconds(10); 
  
  digitalWrite(TRIGGER_3, LOW);
  duration3 = pulseIn(ECHO_3, HIGH);
  distance3 = (duration3/2) / 29.1;
  
  Serial.print(distance3);
  Serial.println("Centimeter:");
  Blynk.virtualWrite(V3, distance3);
  delay(1000);
  
  Blynk.run();
} 
